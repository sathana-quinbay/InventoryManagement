{"ast":null,"code":"export default {\n  name: \"ImportProductComponent\",\n\n  data() {\n    return {\n      csvFileData: [['Samsung A3', 'Hello', 'Mobile', '50000.00', '45', 'imageul.png']],\n      selectedFiles: undefined,\n      files: []\n    };\n  },\n\n  computed: {\n    uploadDisabled() {\n      return this.files.length === 0;\n    }\n\n  },\n  methods: {\n    selectFile() {\n      this.selectedFiles = event.target.files[0];\n    },\n\n    uploadFile() {\n      console.log(\"file upload\");\n      console.log(this.selectedFiles);\n      var sellerId = localStorage.getItem('userId');\n      let formData = new FormData();\n      formData.append(\"file\", this.selectedFiles);\n\n      for (const pair of formData.entries()) {\n        console.log(`${pair[0]}, ${pair[1]}`);\n      }\n\n      this.$store.dispatch('uploadFile', {\n        formData,\n        sellerId\n      });\n    },\n\n    download_csv_file() {\n      //define the heading for each row of the data\n      var csv = 'productName,description,category,price,quantity,imageUrl\\n'; //merge the data with CSV\n\n      this.csvFileData.forEach(function (row) {\n        csv += row.join(',');\n        csv += \"\\n\";\n      }); //display the created CSV data on the web browser \n\n      document.write(csv);\n      var hiddenElement = document.createElement('a');\n      hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\n      hiddenElement.target = '_blank'; //provide the name for the CSV file to be downloaded\n\n      hiddenElement.download = 'sampleProduct.csv';\n      hiddenElement.click(); // document.removeElement('a')\n\n      location.reload();\n    }\n\n  }\n};","map":{"version":3,"names":["name","data","csvFileData","selectedFiles","undefined","files","computed","uploadDisabled","length","methods","selectFile","event","target","uploadFile","console","log","sellerId","localStorage","getItem","formData","FormData","append","pair","entries","$store","dispatch","download_csv_file","csv","forEach","row","join","document","write","hiddenElement","createElement","href","encodeURI","download","click","location","reload"],"sources":["/Users/sathanav/Documents/GitHub/Management/InventoryManagement/src/components/scripts/ImportProductComponent.js"],"sourcesContent":["export default{\n    name:\"ImportProductComponent\",\n    data(){\n        return {\n            csvFileData: [\n                ['Samsung A3','Hello','Mobile','50000.00','45','imageul.png'],\n               \n             ],\n             selectedFiles: undefined,\n             files:[]\n        }\n\n    },\n    computed: {\n        uploadDisabled() {\n          return this.files.length === 0;\n        }\n      },\n    methods:{\n        selectFile() {\n            this.selectedFiles = event.target.files[0];\n          },\n          uploadFile()\n          {\n            console.log(\"file upload\")\n            console.log(this.selectedFiles)\n            var sellerId=localStorage.getItem('userId');\n              let formData = new FormData();\n              formData.append(\"file\",this.selectedFiles);\n            \n              for (const pair of formData.entries()) {\n                console.log(`${pair[0]}, ${pair[1]}`);\n              }\n              this.$store.dispatch('uploadFile',{formData,sellerId})\n          },\n       download_csv_file() {\n\n            //define the heading for each row of the data\n            var csv = 'productName,description,category,price,quantity,imageUrl\\n';\n            \n            //merge the data with CSV\n            this.csvFileData.forEach(function(row) {\n                    csv += row.join(',');\n                    csv += \"\\n\";\n            });\n         \n            //display the created CSV data on the web browser \n            document.write(csv);\n        \n           \n            var hiddenElement = document.createElement('a');\n            hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\n            hiddenElement.target = '_blank';\n            \n            //provide the name for the CSV file to be downloaded\n            hiddenElement.download = 'sampleProduct.csv';\n            hiddenElement.click();\n            // document.removeElement('a')\n            location.reload();\n        }\n    }\n}"],"mappings":"AAAA,eAAc;EACVA,IAAI,EAAC,wBADK;;EAEVC,IAAI,GAAE;IACF,OAAO;MACHC,WAAW,EAAE,CACT,CAAC,YAAD,EAAc,OAAd,EAAsB,QAAtB,EAA+B,UAA/B,EAA0C,IAA1C,EAA+C,aAA/C,CADS,CADV;MAKFC,aAAa,EAAEC,SALb;MAMFC,KAAK,EAAC;IANJ,CAAP;EASH,CAZS;;EAaVC,QAAQ,EAAE;IACNC,cAAc,GAAG;MACf,OAAO,KAAKF,KAAL,CAAWG,MAAX,KAAsB,CAA7B;IACD;;EAHK,CAbA;EAkBVC,OAAO,EAAC;IACJC,UAAU,GAAG;MACT,KAAKP,aAAL,GAAqBQ,KAAK,CAACC,MAAN,CAAaP,KAAb,CAAmB,CAAnB,CAArB;IACD,CAHC;;IAIFQ,UAAU,GACV;MACEC,OAAO,CAACC,GAAR,CAAY,aAAZ;MACAD,OAAO,CAACC,GAAR,CAAY,KAAKZ,aAAjB;MACA,IAAIa,QAAQ,GAACC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAb;MACE,IAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;MACAD,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuB,KAAKlB,aAA5B;;MAEA,KAAK,MAAMmB,IAAX,IAAmBH,QAAQ,CAACI,OAAT,EAAnB,EAAuC;QACrCT,OAAO,CAACC,GAAR,CAAa,GAAEO,IAAI,CAAC,CAAD,CAAI,KAAIA,IAAI,CAAC,CAAD,CAAI,EAAnC;MACD;;MACD,KAAKE,MAAL,CAAYC,QAAZ,CAAqB,YAArB,EAAkC;QAACN,QAAD;QAAUH;MAAV,CAAlC;IACH,CAhBC;;IAiBLU,iBAAiB,GAAG;MAEf;MACA,IAAIC,GAAG,GAAG,4DAAV,CAHe,CAKf;;MACA,KAAKzB,WAAL,CAAiB0B,OAAjB,CAAyB,UAASC,GAAT,EAAc;QAC/BF,GAAG,IAAIE,GAAG,CAACC,IAAJ,CAAS,GAAT,CAAP;QACAH,GAAG,IAAI,IAAP;MACP,CAHD,EANe,CAWf;;MACAI,QAAQ,CAACC,KAAT,CAAeL,GAAf;MAGA,IAAIM,aAAa,GAAGF,QAAQ,CAACG,aAAT,CAAuB,GAAvB,CAApB;MACAD,aAAa,CAACE,IAAd,GAAqB,iCAAiCC,SAAS,CAACT,GAAD,CAA/D;MACAM,aAAa,CAACrB,MAAd,GAAuB,QAAvB,CAjBe,CAmBf;;MACAqB,aAAa,CAACI,QAAd,GAAyB,mBAAzB;MACAJ,aAAa,CAACK,KAAd,GArBe,CAsBf;;MACAC,QAAQ,CAACC,MAAT;IACH;;EAzCG;AAlBE,CAAd"},"metadata":{},"sourceType":"module"}