{"ast":null,"code":"import { registerNewSeller, getSellerById } from '@/service/RegisterSellerService';\nimport { getAllSellers, disbaleSeller, getSellerFromSearch, getSellerFromSort } from '@/service/AdminService';\nexport default {\n  state: {\n    sellers: [],\n    active: 0,\n    inactive: 0,\n    sellerId: localStorage.getItem('userId') || null\n  },\n  getters: {\n    getSellers(state) {\n      return state.sellers;\n    },\n\n    getSellerId(state) {\n      return state.sellerId;\n    },\n\n    getSpecificSeller(state, userId) {\n      let i = 0;\n\n      while (i < state.sellers.length) {\n        if (state.sellers[i].userId == userId) return state.sellers[i];\n      }\n\n      return []; // return state.sellers[];    \n    },\n\n    getActiveCount(state) {\n      return state.active;\n    },\n\n    getInactiveCount(state) {\n      return state.inactive;\n    }\n\n  },\n  mutations: {\n    setSellerId(state, newSellerId) {\n      state.sellerId = newSellerId;\n    },\n\n    setSellers(state, newSellers) {\n      state.sellers = newSellers;\n    },\n\n    addNewSeller(state, newSeller) {\n      state.sellers.push(newSeller);\n    },\n\n    setCount(state, active) {\n      state.active = active;\n    },\n\n    setC(state, inactive) {\n      state.inactive = inactive;\n    }\n\n  },\n  actions: {\n    REGISTER_NEW_SELLER({\n      commit\n    }, {\n      success,\n      error,\n      seller\n    }) {\n      registerNewSeller({\n        success: response => {\n          commit('addNewSeller', seller);\n          success && success(response);\n        },\n        error: err => {\n          error && error(err);\n        },\n        seller\n      });\n    },\n\n    GET_ALL_SELLERS({\n      commit\n    }) {\n      getAllSellers({\n        success: response => {\n          let value = response.data.data;\n          let a = 0,\n              d = 0;\n          let sdata = [];\n          let resp = response;\n\n          for (let i = 0; i < value.length; i++) {\n            if (value[i].status == \"enabled\") {\n              a++;\n            }\n\n            if (value[i].status == \"disabled\") {\n              d++;\n            }\n          }\n\n          for (let i = 0; i < resp.data.data.length; i++) {\n            if (resp.data.data[i].status != \"waiting for approval\") {\n              sdata.push(resp.data.data[i]);\n            }\n          }\n\n          this.commit('setSellers', sdata);\n          console.log(\"filtered\" + sdata);\n          console.log(response.data.data);\n          console.log(a, d);\n          commit('setCount', a);\n          commit('setC', d);\n          commit('setSellers', response.data.data);\n          console.log(response.data.data);\n        },\n        error: err => {\n          commit('setSellers', []);\n          console.warn('No sellers could be fetched from SELLERS API ' + err);\n        }\n      });\n    },\n\n    DISABLE_SELLER({\n      dispatch\n    }, userId) {\n      disbaleSeller({\n        success: response => {\n          console.log(response);\n          console.warn(`Seller: ${userId} is now disabled from the portal`);\n          dispatch('GET_ALL_SELLERS', {\n            success: () => {},\n            error: () => {}\n          });\n        },\n        error: err => {\n          console.warn(err);\n        },\n        userId\n      });\n    },\n\n    GET_SELLER_BY_ID(context, {\n      success,\n      error,\n      userId\n    }) {\n      getSellerById({\n        success: response => {\n          success && success(response);\n          this.commit('setSellers', response.data.data);\n          console.log(userId);\n        },\n        error: err => {\n          error && error(err);\n        },\n        userId\n      });\n    },\n\n    GET_SELLER_FROM_SEARCH(state, payload) {\n      getSellerFromSearch({\n        success: response => {\n          let resp = response; // let sdata=[]\n\n          if (resp.data.data == null) {\n            this.commit(\"setSellers\", []);\n          } else {\n            // for(let i=0;i<(resp.data.data).length;i++)\n            // {\n            //     if(resp.data.data[i].status!=\"waiting for approval\")\n            //     {\n            //         sdata.push(resp.data[i]);\n            //     }\n            // }\n            // this.commit('setSellers',sdata);\n            this.commit('setSellers', response.data.data);\n          }\n        },\n        error: err => {\n          console.warn(err);\n        },\n        payload\n      });\n    },\n\n    GET_SELLER_FROM_SORT(state, payload) {\n      getSellerFromSort({\n        success: response => {\n          console.log(\"store response initiated for sort\");\n          let resp = response.data.data;\n          let sdata = [];\n\n          for (let i = 0; i < resp.length; i++) {\n            if (resp[i].status != \"waiting for approval\") {\n              sdata.push(resp[i]);\n            }\n          }\n\n          this.commit('setSellers', sdata);\n        },\n        error: err => {\n          console.warn(err);\n        },\n        payload\n      });\n    }\n\n  }\n};","map":{"version":3,"names":["registerNewSeller","getSellerById","getAllSellers","disbaleSeller","getSellerFromSearch","getSellerFromSort","state","sellers","active","inactive","sellerId","localStorage","getItem","getters","getSellers","getSellerId","getSpecificSeller","userId","i","length","getActiveCount","getInactiveCount","mutations","setSellerId","newSellerId","setSellers","newSellers","addNewSeller","newSeller","push","setCount","setC","actions","REGISTER_NEW_SELLER","commit","success","error","seller","response","err","GET_ALL_SELLERS","value","data","a","d","sdata","resp","status","console","log","warn","DISABLE_SELLER","dispatch","GET_SELLER_BY_ID","context","GET_SELLER_FROM_SEARCH","payload","GET_SELLER_FROM_SORT"],"sources":["/Users/sharonshaju/Documents/Quinbay/InventoryManagement/src/store/sellerStore.js"],"sourcesContent":["import {registerNewSeller, getSellerById} from '@/service/RegisterSellerService'\nimport  {getAllSellers,disbaleSeller,getSellerFromSearch,getSellerFromSort} from '@/service/AdminService';\n\nexport default {\n    state: {\n        sellers: [],\n        active:0,\n        inactive:0,\n        sellerId: localStorage.getItem('userId') || null,\n    },\n    getters:{\n        getSellers(state){\n            return state.sellers;\n        },\n        getSellerId(state){\n            return state.sellerId;\n        },\n        getSpecificSeller(state, userId){\n            let i = 0;\n            while(i<state.sellers.length){\n                if(state.sellers[i].userId == userId)\n                    return state.sellers[i];\n            }\n            return [];\n            // return state.sellers[];    \n        },\n        getActiveCount(state)\n        {\n            return state.active;\n        },\n        getInactiveCount(state)\n        {\n            return state.inactive;\n        }\n    },\n    mutations:{\n        setSellerId(state, newSellerId){\n            state.sellerId = newSellerId;\n        },\n        setSellers(state,newSellers){\n            state.sellers = newSellers;\n        },\n        addNewSeller(state, newSeller){\n            state.sellers.push(newSeller);\n        },\n        setCount(state,active)\n        {\n            state.active=active;\n        },\n        setC(state,inactive)\n        {\n            state.inactive=inactive;\n        }\n    },\n    actions:{\n        REGISTER_NEW_SELLER({commit}, {success, error, seller}){\n            registerNewSeller({\n                success: (response)=>{\n                    commit('addNewSeller', seller);\n                    success && success(response);\n                },\n                error: (err)=>{\n                    error && error(err);\n                },\n                seller\n            })\n        },\n        GET_ALL_SELLERS({commit}){\n            getAllSellers({\n                success: (response)=>{\n                    let value=response.data.data;\n                    let a=0,d=0;\n                    let sdata=[];\n                    let resp=response;\n                    for(let i=0;i<value.length;i++)\n                    {\n                        if(value[i].status==\"enabled\")\n                        {\n                            a++;\n                        }\n                        if(value[i].status==\"disabled\")\n                        {\n                            d++;\n                        }\n                    }\n                    for(let i=0;i<(resp.data.data).length;i++)\n                         {\n                         if(resp.data.data[i].status!=\"waiting for approval\")\n                             {\n                                 sdata.push(resp.data.data[i]);\n                             }\n                         }\n                         this.commit('setSellers',sdata);\n                         console.log(\"filtered\"+sdata);\n                         console.log(response.data.data);\n                    console.log(a,d);\n                    commit('setCount',a);\n                    commit('setC',d);\n                    commit('setSellers',response.data.data);\n                    console.log(response.data.data);\n                },\n                error: (err)=>{\n                    commit('setSellers', []);\n                    console.warn('No sellers could be fetched from SELLERS API ' + err);\n                }\n            })\n        },\n        DISABLE_SELLER({dispatch}, userId){\n            disbaleSeller({\n                success: (response)=>{\n                    console.log(response);\n                    console.warn(`Seller: ${userId} is now disabled from the portal`);\n                    dispatch('GET_ALL_SELLERS', {\n                        success: ()=>{},\n                        error: ()=>{}\n                    });\n                \n                },\n                error: (err)=>{\n                    console.warn(err);\n                },\n                userId\n            })\n        },\n        GET_SELLER_BY_ID(context, {success, error, userId}){\n            getSellerById({\n                success: (response)=>{\n                    success && success(response);\n                    this.commit('setSellers',response.data.data);\n                    console.log(userId);\n                },\n                error: (err)=>{\n                    error && error(err);\n                },\n                userId\n            })\n        },\n        GET_SELLER_FROM_SEARCH(state,payload){\n            getSellerFromSearch({\n                success: (response)=>{\n                    let resp=response;\n                    // let sdata=[]\n                    if(resp.data.data==null)\n                    {\n                       this.commit(\"setSellers\",[])\n                    }\n                    else\n                    {\n                        // for(let i=0;i<(resp.data.data).length;i++)\n                        // {\n                        //     if(resp.data.data[i].status!=\"waiting for approval\")\n                        //     {\n                        //         sdata.push(resp.data[i]);\n                        //     }\n                        // }\n                        // this.commit('setSellers',sdata);\n                        this.commit('setSellers',response.data.data);\n    \n                    }\n                },\n                error: (err)=>{\n                    console.warn(err);\n                },\n                payload\n            })\n        },\n        GET_SELLER_FROM_SORT(state,payload){\n            getSellerFromSort({\n                success: (response)=>{\n                    console.log(\"store response initiated for sort\");\n                    let resp=response.data.data;\n                    let sdata=[]\n                    for(let i=0;i<resp.length;i++)\n                    {\n                        if(resp[i].status!=\"waiting for approval\")\n                        {\n                            sdata.push(resp[i]);\n                        }\n                    }\n                    this.commit('setSellers',sdata);\n                },\n                error: (err)=>{\n                    console.warn(err);\n                },\n                payload\n            })\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}